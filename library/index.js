"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.SnowflakeId=void 0;const crypto_1=require("crypto");class SnowflakeId{constructor(e={}){if(this.id=new ArrayBuffer(8),this.idView=new DataView(this.id),this.lastTime=0,this.epoch=0,this.sequenceId=0,this.instanceId=0,this.isOverflowHandlerFunction=!1,Number.isInteger(e.epoch)){if(!(e.epoch<=Date.now()))throw new Error("Options['epoch'] should not exceed current time");this.epoch=e.epoch}if(Number.isInteger(e.instanceId)){if(!(e.instanceId>-1&&e.instanceId<1024))throw new Error("Options['instanceId'] should be an integer between 0 and 1023");this.instanceId=e.instanceId}else this.instanceId=(0,crypto_1.randomInt)(1024);"function"==typeof e.overflowHandler&&(this.overflowHandler=e.overflowHandler,this.isOverflowHandlerFunction=!0),this.instanceId<<=12}generateId(){if(4096!==this.sequenceId){const e=Date.now()-this.epoch;this.lastTime!==e&&(this.sequenceId=0,this.lastTime=e),this.idView.setUint32(0,Math.trunc(e/1024)),this.idView.setUint32(4,(e<<22)+this.instanceId+this.sequenceId++)}else{if(!this.isOverflowHandlerFunction)throw new Error("SnowflakeId['sequenceId'] should not exceed 4095 in given millisecond");this.overflowHandler()}return this}getId(){return this.generateId(),this.idView.getBigUint64(0)}getBufferId(){return this.generateId(),Buffer.from(this.id)}}exports.SnowflakeId=SnowflakeId,exports.default=SnowflakeId;