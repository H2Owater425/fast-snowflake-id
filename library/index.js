"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const crypto_1=require("crypto");class SnowflakeId{static getInstanceId(e,t){if(e>-1&&e<32){if(t>-1&&t<32)return e<<5+t;throw new Error("WorkerId must be an integer between 0 and 32")}throw new Error("DatacenterId must be an integer between 0 and 32")}constructor(e={}){if(this._id=new ArrayBuffer(8),this._idView=new DataView(this._id),this._lastTime=0,this._epoch=0,this._sequenceId=0,this._instanceId=0,Number.isInteger(e.epoch)){if(!(e.epoch<=Date.now()))throw new Error("Options['epoch'] must not exceed current time");this._epoch=e.epoch}if(Number.isInteger(e.instanceId)){if(!(e.instanceId>-1&&e.instanceId<1024))throw new Error("Options['instanceId'] must be an integer between 0 and 1023");this._instanceId=e.instanceId}else this._instanceId=(0,crypto_1.randomInt)(1024);"function"==typeof e.overflowHandler&&(this._overflowHandler=e.overflowHandler),this._instanceId<<=12}generateId(){if(4096!==this._sequenceId){const e=Date.now()-this._epoch;this._lastTime!==e&&(this._sequenceId=0,this._lastTime=e),this._idView.setUint32(0,Math.trunc(e/1024)),this._idView.setUint32(4,(e<<22)+this._instanceId+this._sequenceId++)}else{if("function"!=typeof this._overflowHandler)throw new Error("SnowflakeId['sequenceId'] must not exceed 4095 in given millisecond");this._overflowHandler()}return this}getId(){return this._idView.getBigUint64(0)}getBufferId(){return Buffer.from(this._id)}}exports.default=SnowflakeId;